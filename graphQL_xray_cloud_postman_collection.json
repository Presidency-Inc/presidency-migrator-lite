{
	"info": {
		"_postman_id": "cace72d3-21d3-48a1-bf5a-4269048c9c9b",
		"name": "Xray_Cloud_GraphQL_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1707738"
	},
	"item": [
		{
			"name": "REST API",
			"item": [
				{
					"name": "authentication",
					"item": [
						{
							"name": "authenticate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    var jsonData = pm.response.json();",
											"    pm.globals.set(\"AUTH_TOKEN\", jsonData);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/authenticate",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "setup",
					"item": [
						{
							"name": "get project id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Project returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.key).to.not.be.empty;",
											"    pm.globals.set(\"PROJECT_ID\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/api/2/project/{{PROJECT_KEY}}",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"project",
										"{{PROJECT_KEY}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get Xray custom fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"custom fields returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
											"",
											"    for (var i = 0;i<jsonData.length;i++) {",
											"        var cf = jsonData[i];",
											"        // ((cf.name == \"Test Type\") || (cf.schema.custom == \"com.xpandit.plugins.xray:test-type-custom-field\")) ",
											"        if (cf.name == \"Test Type\") {",
											"            pm.globals.set(\"CF_Test_Type\", cf.id);",
											"        } else if (cf.name == \"Pre-Condition Type\") {",
											"            pm.globals.set(\"CF_Precondition_Type\", cf.id);",
											"        } else if (cf.name == \"Cucumber Scenario\") {",
											"            pm.globals.set(\"CF_Cucumber_Scenario\", cf.id);",
											"        } else if (cf.name == \"Cucumber Test Type\") {",
											"            pm.globals.set(\"CF_Cucumber_Test_Type\", cf.id);",
											"        } else if (cf.name == \"Manual Test Steps\") {",
											"            pm.globals.set(\"CF_Manual_Test_Steps\", cf.id);",
											"        } else if (cf.name == \"Generic Test Definition\") {",
											"            pm.globals.set(\"CF_Generic_Definition\", cf.id);",
											"        } else if (cf.name == \"Test Environments\") {",
											"            pm.globals.set(\"CF_Test_Environments\", cf.id);",
											"        } else if (cf.name == \"Test Repository Path\") {",
											"            pm.globals.set(\"CF_Test_Repository_Path\", cf.id);",
											"        }",
											"",
											"    }",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/api/2/field",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"field"
									]
								}
							},
							"response": []
						},
						{
							"name": "create user story S1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Story created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.key).to.not.be.empty;",
											"    pm.globals.set(\"S1_KEY\", jsonData.key);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"S1\",\n       \"description\": \"S1: example of a user storu\",\n       \"issuetype\": {\n          \"name\": \"{{STORY_ISSUETYPE_NAME}}\"\n       }\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "create defect D1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Bug created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.key).to.not.be.empty;",
											"    pm.globals.set(\"D1_KEY\", jsonData.key);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"D1\",\n       \"description\": \"D1: example of a udefect\",\n       \"issuetype\": {\n          \"name\": \"{{BUG_ISSUETYPE_NAME}}\"\n       }\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "create folder \"Postman F1\" in Test Repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"folder created\", function () {",
											"    var jsonData = pm.response.json();",
											"    if (jsonData.errors != undefined)",
											"    {",
											"        pm.expect(jsonData.errors[0].message).to.include(\"already exists\");",
											"        pm.globals.set(\"F1_PATH\",\"/Postman F1\");",
											"        pm.globals.set(\"F1_NAME\",\"Postman F1\");",
											"    } else {",
											"        pm.expect(jsonData.data).to.not.be.empty;",
											"        pm.expect(jsonData.data.createFolder).to.not.be.undefined;",
											"        //pm.globals.set(\"F1_ID\",jsonData.data.createFolder.folder.id);",
											"        pm.globals.set(\"F1_PATH\",jsonData.data.createFolder.folder.path);",
											"        pm.globals.set(\"F1_NAME\",jsonData.data.createFolder.folder.name);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createFolder(\n        projectId: \"{{PROJECT_ID}}\"\n        path: \"/Postman F1\"\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create folder \"Postman F2\" in Test Repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"folder created\", function () {",
											"    var jsonData = pm.response.json();",
											"    if (jsonData.errors != undefined)",
											"    {",
											"        pm.expect(jsonData.errors[0].message).to.include(\"already exists\");",
											"        pm.globals.set(\"F2_PATH\",\"/Postman F2\");",
											"        pm.globals.set(\"F2_NAME\",\"Postman F2\");",
											"    } else {",
											"        pm.expect(jsonData.data).to.not.be.empty;",
											"        pm.expect(jsonData.data.createFolder).to.not.be.undefined;",
											"        //pm.globals.set(\"F2_ID\",jsonData.data.createFolder.folder.id);",
											"        pm.globals.set(\"F2_PATH\",jsonData.data.createFolder.folder.path);",
											"        pm.globals.set(\"F2_NAME\",jsonData.data.createFolder.folder.name);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createFolder(\n        projectId: \"{{PROJECT_ID}}\"\n        path: \"/Postman F2\"\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create manual test T1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.be.empty;",
											"    pm.globals.set(\"T1_KEY\", jsonData.data.createTest.test.jira.key);",
											"    pm.globals.set(\"T1_ID\", jsonData.data.createTest.test.issueId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createTest(\n        testType: { name: \"Manual\" },\n        steps: [\n            {\n                action: \"Step 1\",\n                data: \"input Data 1\",\n                result: \"Excepted result 1\"\n            },\n            {\n                action: \"Step 2\",\n                data: \"input Data 2\",\n                result: \"Excepted result 2\"\n            },\n            {\n                action: \"Step 3\",\n                data: \"input Data 3\",\n                result: \"Excepted result 3\"\n            },\n            {\n                action: \"Step 4\",\n                data: \"input Data 4\",\n                result: \"Excepted result 4\"\n            }\n        ],\n        jira: {\n            fields: { \n                summary: \"T1\",\n                description: \"T1: example of manual test\", \n                project: {key: \"{{PROJECT_KEY}}\"} \n            }\n        }\n        folderPath: \"{{F1_PATH}}\"\n    ) {\n        test {\n            issueId\n            testType {\n                name\n            }\n            steps {\n                action\n                data\n                result\n            }\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create manual test T4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.be.empty;",
											"    pm.globals.set(\"T4_KEY\", jsonData.data.createTest.test.jira.key);",
											"    pm.globals.set(\"T4_ID\", jsonData.data.createTest.test.issueId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createTest(\n        testType: { name: \"Manual\" },\n        steps: [\n            {\n                action: \"Step 1\",\n                data: \"input Data 1\",\n                result: \"Excepted result 1\"\n            },\n            {\n                action: \"Step 2\",\n                data: \"input Data 2\",\n                result: \"Excepted result 2\"\n            },\n            {\n                action: \"Step 3\",\n                data: \"input Data 3\",\n                result: \"Excepted result 3\"\n            },\n            {\n                action: \"Step 4\",\n                data: \"input Data 4\",\n                result: \"Excepted result 4\"\n            }\n        ],\n        jira: {\n            fields: { \n                summary: \"T4\",\n                description: \"T4: example of manual test\", \n                project: {key: \"{{PROJECT_KEY}}\"} \n            }\n        }\n        folderPath: \"{{F1_PATH}}\"\n    ) {\n        test {\n            issueId\n            testType {\n                name\n            }\n            steps {\n                action\n                data\n                result\n            }\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create cucumber test T2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.be.empty;",
											"    pm.globals.set(\"T2_KEY\", jsonData.data.createTest.test.jira.key);",
											"    pm.globals.set(\"T2_ID\", jsonData.data.createTest.test.issueId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createTest(\n        testType: { name: \"Cucumber\" },\n        gherkin: \"Given I have entered <input_1> into the calculator\\nAnd I have entered <input_2> into the calculator\\nWhen I press <button>\\nThen the result should be <output> on the screen\\n\\n  Examples:\\n    | input_1 | input_2 | button | output |\\n    | 20      | 30      | add    | 50     |\\n    | 2       | 5       | add    | 7      |\",\n        jira: {\n            fields: { summary:\"Sum of two numbers\", project: {key: \"{{PROJECT_KEY}}\"} }\n        }\n        folderPath: \"{{F1_PATH}}\"\n    ) {\n        test {\n            issueId\n            testType {\n                name\n            }\n            gherkin\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "create a gherkin (e.g. Cucumber) test"
							},
							"response": []
						},
						{
							"name": "create generic test T3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.be.empty;",
											"    pm.globals.set(\"T3_KEY\", jsonData.data.createTest.test.jira.key);",
											"    pm.globals.set(\"T3_ID\", jsonData.data.createTest.test.issueId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createTest(\n        testType: { name: \"Generic\" },\n        unstructured: \"sum_script.sh\",\n        jira: {\n            fields: { \n                summary:\"T3\", \n                description: \"T3: example of generic test\",\n                project: {key: \"{{PROJECT_KEY}}\"} \n            }\n        }\n        folderPath: \"{{F1_PATH}}\"\n    ) {\n        test {\n            issueId\n            testType {\n                name\n            }\n            unstructured\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "create an unstructured (e.g. Generic) test"
							},
							"response": []
						},
						{
							"name": "create manual precondition P1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Precondition created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.be.empty;",
											"    pm.expect(jsonData.data.createPrecondition.precondition.issueId).to.not.be.empty;",
											"    pm.globals.set(\"P1_ID\", jsonData.data.createPrecondition.precondition.issueId);",
											"    pm.globals.set(\"P1_KEY\", jsonData.data.createPrecondition.precondition.jira.key);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createPrecondition(\n        preconditionType: { name: \"Manual\" }\n        definition: \"calculator turned on\"\n        jira: {\n            fields: {\n                    summary: \"P1\",\n                    description: \"P1: example of precondition\",\n                    project: {key: \"{{PROJECT_KEY}}\"} \n                }\n        }\n    ) {\n        precondition {\n            issueId\n            preconditionType {\n                name\n            }\n            definition\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								},
								"description": "create a structured (e.g. Manual, step-based) precondition"
							},
							"response": []
						},
						{
							"name": "create test set TS1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test Set created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.be.empty;",
											"    pm.expect(jsonData.data.createTestSet.testSet.issueId).to.not.be.empty;",
											"    pm.globals.set(\"TS1_ID\", jsonData.data.createTestSet.testSet.issueId);",
											"    pm.globals.set(\"TS1_KEY\", jsonData.data.createTestSet.testSet.jira.key);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createTestSet(\n        testIssueIds: []\n        jira: {\n            fields: {\n                summary: \"TS1\",\n                description: \"TS1: example of test set\",\n                project: {key: \"{{PROJECT_KEY}}\"} \n            }\n        }\n    ) {\n        testSet {\n            issueId\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "create test plan TP1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Test Plan created\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.key).to.not.be.empty;",
											"    pm.globals.set(\"TP1_ID\", jsonData.id);",
											"    pm.globals.set(\"TP1_KEY\", jsonData.key);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{JIRA_PASSWORD}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{JIRA_USERNAME}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"fields\": {\n       \"project\":\n       {\n          \"key\": \"{{PROJECT_KEY}}\"\n       },\n       \"summary\": \"TP1\",\n       \"description\": \"TP1: example of test plan\",\n       \"issuetype\": {\n          \"name\": \"{{TESTPLAN_ISSUETYPE_NAME}}\"\n       }     \n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{JIRA_BASEURL}}/rest/api/2/issue",
									"host": [
										"{{JIRA_BASEURL}}"
									],
									"path": [
										"rest",
										"api",
										"2",
										"issue"
									]
								}
							},
							"response": []
						},
						{
							"name": "create test execution TE1 with one run per each test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test Execution created with 3 runs\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.key).to.not.be.empty;",
											"    pm.globals.set(\"TE1_ID\", jsonData.id);",
											"    pm.globals.set(\"TE1_KEY\", jsonData.key);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"info\" : {\n        \"summary\" : \"Execution of automated tests for release\",\n        \"description\" : \"This execution is automatically created when importing execution results from an external source\"\n    },\n    \"tests\" : [\n        {\n            \"testKey\" : \"{{T1_KEY}}\",\n            \"start\" : \"2014-08-30T11:47:35+01:00\",\n            \"finish\" : \"2014-08-30T11:50:56+01:00\",\n            \"comment\" : \"Successful execution\",\n            \"status\" : \"PASSED\",\n            \"evidence\" : [\n                {\n                    \"data\": \"ZHVtbXkgY29udGVudA==\",\n                    \"filename\": \"dummy.txt\",\n                    \"contentType\": \"text/plain\"\n                }\n            ],\n\t\t\t\"steps\": [\n                {\n                    \"status\": \"PASSED\",\n                    \"comment\": \"Comment on Test Step Result 1\"\n                    /*\n                    \"evidence\" : [\n\t\t                {\n\t\t                    \"data\": \"ZHVtbXkgY29udGVudA==\",\n\t\t                    \"filename\": \"dummy.txt\",\n\t\t                    \"contentType\": \"text/plain\"\n\t\t                }\n\t\t            ]\n                    */\n                },\n                {\n                    \"status\": \"PASSED\",\n                    \"comment\": \"Comment on Test Step Result 2\"\n                },\n                {\n                    \"status\": \"PASSED\",\n                    \"comment\": \"Comment on Test Step Result 3\"\n                },\n\t\t\t\t{\n                    \"status\": \"PASSED\",\n                    \"comment\": \"Comment on Test Step Result 4\"\n                }\n        \t]\n        },\n        {\n            \"testKey\" : \"{{T2_KEY}}\",\n            \"start\" : \"2014-08-30T11:47:35+01:00\",\n            \"finish\" : \"2014-08-30T11:50:56+01:00\",\n            \"comment\" : \"Successful execution\",\n            \"status\" : \"PASSED\"\n        },\n        {\n            \"testKey\" : \"{{T3_KEY}}\",\n            \"start\" : \"2014-08-30T11:47:35+01:00\",\n            \"finish\" : \"2014-08-30T11:50:56+01:00\",\n            \"comment\" : \"Successful execution\",\n            \"status\" : \"PASSED\"\n        }\n ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/import/execution",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"import",
										"execution"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "backups",
					"item": [
						{
							"name": "create backup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    var jsonData = pm.response.json();",
											"    pm.globals.set(\"backup_jobId\", jsonData.jobId);",
											"    setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/backup",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"backup"
									]
								}
							},
							"response": []
						},
						{
							"name": "get backup status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"job status returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.be.oneOf([\"pending\", \"working\",\"failed\", \"successful\", \"partially_successful\", \"unsuccessful\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/backup/{{backup_jobId}}/status",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"backup",
										"{{backup_jobId}}",
										"status"
									]
								}
							},
							"response": [
								{
									"name": "get backup status - success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://xray.cloud.getxray.app/api/v1/backup/{{backup_jobId}}/status",
											"protocol": "https",
											"host": [
												"xray",
												"cloud",
												"getxray",
												"app"
											],
											"path": [
												"api",
												"v1",
												"backup",
												"{{backup_jobId}}",
												"status"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Fri, 19 Jun 2020 08:44:30 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"56-AJ/KZOhXVXQBu2LgV5i8ZBMavN4\""
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Retry-After",
											"value": "59.86"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-RateLimit-Limit",
											"value": "60"
										},
										{
											"key": "X-RateLimit-Remaining",
											"value": "58"
										},
										{
											"key": "X-RateLimit-Reset",
											"value": "Fri Jun 19 2020 08:45:30 GMT+0000 (Coordinated Universal Time)"
										},
										{
											"key": "Content-Length",
											"value": "86"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"status\": \"successful\",\n    \"fileUrl\": \"https://xray.cloud.getxray.app/api/v1/backup/file\"\n}"
								},
								{
									"name": "get backup status - job not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://xray.cloud.getxray.app/api/v1/backup/{{backup_jobId}}/status",
											"protocol": "https",
											"host": [
												"xray",
												"cloud",
												"getxray",
												"app"
											],
											"path": [
												"api",
												"v1",
												"backup",
												"{{backup_jobId}}",
												"status"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Cache-Control",
											"value": "no-store, no-cache, must-revalidate, proxy-revalidate"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Date",
											"value": "Fri, 19 Jun 2020 08:51:48 GMT"
										},
										{
											"key": "ETag",
											"value": "W/\"1a-oA8cmcuVj6EA7J4YWzCAP5nJBT4\""
										},
										{
											"key": "Expires",
											"value": "0"
										},
										{
											"key": "Pragma",
											"value": "no-cache"
										},
										{
											"key": "Retry-After",
											"value": "19.862"
										},
										{
											"key": "Surrogate-Control",
											"value": "no-store"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "X-RateLimit-Limit",
											"value": "60"
										},
										{
											"key": "X-RateLimit-Remaining",
											"value": "53"
										},
										{
											"key": "X-RateLimit-Reset",
											"value": "Fri Jun 19 2020 08:52:08 GMT+0000 (Coordinated Universal Time)"
										},
										{
											"key": "Content-Length",
											"value": "26"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"job not found.\"\n}"
								}
							]
						},
						{
							"name": "get backup file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"backup returned\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.response.to.be.header(\"Content-Type\", \"application/octet-stream\");",
											"",
											"});",
											"",
											"// http://www.postmanlabs.com/postman-collection/Response.html",
											"pm.test(\"backup returned as zip attachment\", function () {",
											"    pm.response.to.have.header(\"Content-Disposition\");",
											"    //pm.expect(pm.response.contentInfo().fileExtension).to.be.eq(\"zip\");",
											"    //pm.expect(pm.response.contentInfo().fileName).to.include(\".zip\");",
											"     var disposition = pm.response.headers.get(\"Content-Disposition\");",
											"     pm.expect(disposition).to.include(\"attachment;\");",
											"     pm.expect(disposition).to.include(\".zip\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/backup/file",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"backup",
										"file"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "import tests",
					"item": [
						{
							"name": "import tests in bulk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"data returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.not.be.empty;",
											"    pm.expect(jsonData.jobId).to.not.be.empty;",
											"    pm.globals.set(\"import_jobId\", jsonData.jobId);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"testtype\": \"Cucumber\",\n        \"fields\": {\n            \"summary\": \"This tests the addition of 2 numbers.\",\n            \"project\": { \"key\": \"CALC\" }\n        },\n        \"gherkin_def\": \"Given I have entered <input_1> into the calculator\\nAnd I have entered <input_2> into the calculator\\nWhen I press <button>\\nThen the result should be <output> on the screen\\n\\n  Examples:\\n    | input_1 | input_2 | button | output |\\n    | 20      | 30      | add    | 50     |\\n    | 2       | 5       | add    | 7      |\\n    | 0       | 40      | add    | 40     |\\n    | 1       | 40      | add    | 41     |\"\n    },\n    {\n        \"testtype\": \"Manual\",\n        \"fields\": {\n            \"summary\": \"This tests the Subtraction of two numbers.\",\n            \"project\": { \"key\": \"CALC\" }\n        },\n        \"update\": {\n            \"issuelinks\": [\n                {\n                    \"add\": {\n                        \"type\": {\n                            \"name\": \"Test\"\n                        },\n                        \"outwardIssue\": {\n                            \"key\": \"CALC-123\"\n                        }\n                    }\n                }\n            ]\n        },\n        \"steps\": [\n            {\n                \"action\": \"I choose the operation of the calculator *Subtraction*\",\n                \"data\": \"\",\n                \"result\": \"The operation must appear selected.\"\n            },\n            {\n                \"action\": \"I enter the input into the calculator\",\n                \"data\": \"I1: 5\\nI2: 2\",\n                \"result\": \"\"\n            },\n            {\n                \"action\": \"I press the *Calculate* button\",\n                \"result\": \"The result *3* should be displayed in the screen, on the right of the \\\"=\\\" sign.\"\n            }\n        ]\n    },\n    {\n        \"testtype\": \"Generic\",\n        \"fields\": {\n            \"summary\": \"CanMultiply\",\n            \"project\": { \"key\": \"CALC\" }\n        },\n        \"unstructured_def\": \"x.CalculatorTests.CanMultiply\",\n        \"xray_test_repository_folder\": \"Generic Tests/Arithmetic Tests\"\n    }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/import/test/bulk",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"import",
										"test",
										"bulk"
									]
								}
							},
							"response": []
						},
						{
							"name": "check import job status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"job status returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.be.oneOf([\"pending\", \"working\",\"failed\", \"successful\", \"partially_successful\", \"unsuccessful\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/import/test/bulk/{{import_jobId}}/status",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"import",
										"test",
										"bulk",
										"{{import_jobId}}",
										"status"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "execution results",
			"item": [
				{
					"name": "import",
					"item": [
						{
							"name": "Xray JSON",
							"item": [
								{
									"name": "standard Xray JSON endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"info\" : {\n        \"summary\" : \"Execution of automated tests for release\",\n        \"description\" : \"This execution is automatically created when importing execution results from an external source\",\n        \"startDate\" : \"2020-05-30T11:37:00+01:00\",\n        \"finishDate\" : \"2020-05-30T11:50:00+01:00\"\n    },\n    \"tests\" : [\n        {\n            \"testKey\" : \"{{T1_KEY}}\",\n            \"start\" : \"2020-05-30T11:47:35+01:00\",\n            \"finish\" : \"2020-05-30T11:49:35+01:00\",\n            \"comment\" : \"Successful execution1\",\n            \"status\" : \"PASS\"\n        },\n        {\n            \"testKey\" : \"{{T2_KEY}}\",\n            \"start\" : \"2020-05-30T11:37:35+01:00\",\n            \"finish\" : \"2020-05-30T11:39:35+01:00\",\n            \"comment\" : \"Successful execution2\",\n            \"status\" : \"PASS\"\n        },\n        {\n            \"testKey\" : \"{{T3_KEY}}\",\n            \"start\" : \"2020-05-30T11:44:35+01:00\",\n            \"finish\" : \"2020-05-30T11:45:35+01:00\",\n            \"comment\" : \"Successful execution3\",\n            \"status\" : \"PASS\"\n        }\n ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/import/execution",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"import",
												"execution"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cucumber",
							"item": [
								{
									"name": "standard Cucumber endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[{\n    \"id\": \"as-a-user,-i-can-sum-two-numbers\",\n    \"uri\": \"features/sample_scenario_outline.feature\",\n    \"keyword\": \"Feature\",\n    \"name\": \"As a user, I can sum two numbers\",\n    \"description\": \"\",\n    \"line\": 2,\n    \"tags\": [{\n        \"name\": \"@REQ_{{S1_KEY}}\",\n        \"line\": 1\n    }],\n    \"elements\": [{\n        \"id\": \"as-a-user,-i-can-sum-two-numbers;;;2\",\n        \"keyword\": \"Scenario Outline\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"line\": 13,\n        \"type\": \"scenario\",\n        \"tags\": [{\n            \"name\": \"@REQ_{{S1_KEY}}\",\n            \"line\": 1\n        }, {\n            \"name\": \"@TEST_{{T2_KEY}}\",\n            \"line\": 4\n        }],\n        \"before\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:9\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 21000\n            }\n        }],\n        \"steps\": [{\n            \"keyword\": \"Given \",\n            \"name\": \"I have entered 20 into the calculator\",\n            \"line\": 6,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 45000\n            }\n        }, {\n            \"keyword\": \"And \",\n            \"name\": \"I have entered 30 into the calculator\",\n            \"line\": 7,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 11000\n            }\n        }, {\n            \"keyword\": \"When \",\n            \"name\": \"I press add\",\n            \"line\": 8,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:43\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 17000\n            }\n        }, {\n            \"keyword\": \"Then \",\n            \"name\": \"the result should be 50 on the screen\",\n            \"line\": 9,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:51\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 764000\n            }\n        }],\n        \"after\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:13\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 8000\n            }\n        }]\n    }, {\n        \"id\": \"as-a-user,-i-can-sum-two-numbers;;;3\",\n        \"keyword\": \"Scenario Outline\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"line\": 14,\n        \"type\": \"scenario\",\n        \"tags\": [{\n            \"name\": \"@REQ_{{S1_KEY}}\",\n            \"line\": 1\n        }, {\n            \"name\": \"@@TEST_{{T2_KEY}}\",\n            \"line\": 4\n        }],\n        \"before\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:9\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 8000\n            }\n        }],\n        \"steps\": [{\n            \"keyword\": \"Given \",\n            \"name\": \"I have entered 2 into the calculator\",\n            \"line\": 6,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 14000\n            }\n        }, {\n            \"keyword\": \"And \",\n            \"name\": \"I have entered 5 into the calculator\",\n            \"line\": 7,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 9000\n            }\n        }, {\n            \"keyword\": \"When \",\n            \"name\": \"I press add\",\n            \"line\": 8,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:43\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 11000\n            }\n        }, {\n            \"keyword\": \"Then \",\n            \"name\": \"the result should be 7 on the screen\",\n            \"line\": 9,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:51\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 19000\n            }\n        }],\n        \"after\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:13\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 6000\n            }\n        }]\n    }, {\n        \"id\": \"as-a-user,-i-can-sum-two-numbers;;;4\",\n        \"keyword\": \"Scenario Outline\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"line\": 15,\n        \"type\": \"scenario\",\n        \"tags\": [{\n            \"name\": \"@REQ_{{S1_KEY}}\",\n            \"line\": 1\n        }, {\n            \"name\": \"@TEST_{{T2_KEY}}\",\n            \"line\": 4\n        }],\n        \"before\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:9\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 8000\n            }\n        }],\n        \"steps\": [{\n            \"keyword\": \"Given \",\n            \"name\": \"I have entered 0 into the calculator\",\n            \"line\": 6,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 14000\n            }\n        }, {\n            \"keyword\": \"And \",\n            \"name\": \"I have entered 40 into the calculator\",\n            \"line\": 7,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 9000\n            }\n        }, {\n            \"keyword\": \"When \",\n            \"name\": \"I press add\",\n            \"line\": 8,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:43\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 11000\n            }\n        }, {\n            \"keyword\": \"Then \",\n            \"name\": \"the result should be 40 on the screen\",\n            \"line\": 9,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:51\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 17000\n            }\n        }],\n        \"after\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:13\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 6000\n            }\n        }]\n    }, {\n        \"id\": \"as-a-user,-i-can-sum-two-numbers;;;5\",\n        \"keyword\": \"Scenario Outline\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"line\": 16,\n        \"type\": \"scenario\",\n        \"tags\": [{\n            \"name\": \"@REQ_{{S1_KEY}}\",\n            \"line\": 1\n        }, {\n            \"name\": \"@TEST_{{T2_KEY}}\",\n            \"line\": 4\n        }],\n        \"before\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:9\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 7000\n            }\n        }],\n        \"steps\": [{\n            \"keyword\": \"Given \",\n            \"name\": \"I have entered 4 into the calculator\",\n            \"line\": 6,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 14000\n            }\n        }, {\n            \"keyword\": \"And \",\n            \"name\": \"I have entered 50 into the calculator\",\n            \"line\": 7,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 9000\n            }\n        }, {\n            \"keyword\": \"When \",\n            \"name\": \"I press add\",\n            \"line\": 8,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:43\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 27000\n            }\n        }, {\n            \"keyword\": \"Then \",\n            \"name\": \"the result should be 54 on the screen\",\n            \"line\": 9,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:51\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 17000\n            }\n        }],\n        \"after\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:13\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 6000\n            }\n        }]\n    }, {\n        \"id\": \"as-a-user,-i-can-sum-two-numbers;;;6\",\n        \"keyword\": \"Scenario Outline\",\n        \"name\": \"\",\n        \"description\": \"\",\n        \"line\": 17,\n        \"type\": \"scenario\",\n        \"tags\": [{\n            \"name\": \"@REQ_{{S1_KEY}}\",\n            \"line\": 1\n        }, {\n            \"name\": \"@{{T1_KEY}}\",\n            \"line\": 4\n        }],\n        \"before\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:9\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 8000\n            }\n        }],\n        \"steps\": [{\n            \"keyword\": \"Given \",\n            \"name\": \"I have entered 5 into the calculator\",\n            \"line\": 6,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 14000\n            }\n        }, {\n            \"keyword\": \"And \",\n            \"name\": \"I have entered 50 into the calculator\",\n            \"line\": 7,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:39\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 9000\n            }\n        }, {\n            \"keyword\": \"When \",\n            \"name\": \"I press add\",\n            \"line\": 8,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:43\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 11000\n            }\n        }, {\n            \"keyword\": \"Then \",\n            \"name\": \"the result should be 55 on the screen\",\n            \"line\": 9,\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:51\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 18000\n            }\n        }],\n        \"after\": [{\n            \"match\": {\n                \"location\": \"features/step_definitions/calculator_steps.rb:13\"\n            },\n            \"result\": {\n                \"status\": \"passed\",\n                \"duration\": 6000\n            }\n        }]\n    }]\n}]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/import/execution/cucumber?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"import",
												"execution",
												"cucumber"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "JUnit",
							"item": [
								{
									"name": "standard JUnit endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/Users/sergio/exps/xray-postman-collections/junit_sample.xml"
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/import/execution/junit?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"import",
												"execution",
												"junit"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "TestNG",
							"item": [
								{
									"name": "standard TestNG endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/Users/sergio/exps/xray-postman-collections/testng_sample.xml"
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/import/execution/testng?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"import",
												"execution",
												"testng"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "NUnit",
							"item": [
								{
									"name": "standard Nunit endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/Users/sergio/exps/xray-postman-collections/nunit_sample.xml"
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/import/execution/nunit?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"import",
												"execution",
												"nunit"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "xUnit",
							"item": [
								{
									"name": "standard xUnit endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/Users/sergio/exps/xray-postman-collections/xunit_sample.xml"
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/import/execution/xunit?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"import",
												"execution",
												"xunit"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Robot Framework",
							"item": [
								{
									"name": "standard Robot Framework endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.key).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "file",
											"file": {
												"src": "/Users/sergio/exps/xray-postman-collections/robot_sample.xml"
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/import/execution/robot?projectKey={{PROJECT_KEY}}",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"import",
												"execution",
												"robot"
											],
											"query": [
												{
													"key": "projectKey",
													"value": "{{PROJECT_KEY}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "GraphQL",
			"item": [
				{
					"name": "tests",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "create manual test (TEMP_TEST1_ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTest.test.issueId).to.not.be.empty;",
													"    pm.globals.set(\"TEMP_TEST1_ID\",jsonData.data.createTest.test.issueId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createTest(\n        testType: { name: \"Manual\" },\n        steps: [\n            {\n                action: \"Create first example step\",\n                result: \"First step was created\"\n            },\n            {\n                action: \"Create second example step with data\",\n                data: \"Data for the step\",\n                result: \"Second step was created with data\"\n            }\n        ],\n        jira: {\n            fields: { summary:\"Manual Test\", project: {key: \"CALC\"} }\n        }\n    ) {\n        test {\n            issueId\n            testType {\n                name\n            }\n            steps {\n                action\n                data\n                result\n            }\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "create a structured (e.g. Manual, step-based) test"
									},
									"response": []
								},
								{
									"name": "create generic test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTest.test.issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createTest(\n        testType: { name: \"Generic\" },\n        unstructured: \"Perform exploratory tests on calculator.\",\n        jira: {\n            fields: { summary:\"Exploratory Test\", project: {key: \"{{PROJECT_KEY}}\"} }\n        }\n    ) {\n        test {\n            issueId\n            testType {\n                name\n            }\n            unstructured\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "create an unstructured (e.g. Generic) test"
									},
									"response": []
								},
								{
									"name": "create cucumber test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTest.test.issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createTest(\n        testType: { name: \"Cucumber\" },\n        gherkin: \"Given I have entered <input_1> into the calculator\\nAnd I have entered <input_2> into the calculator\\nWhen I press <button>\\nThen the result should be <output> on the screen\\n\\n  Examples:\\n    | input_1 | input_2 | button | output |\\n    | 20      | 30      | add    | 50     |\\n    | 2       | 5       | add    | 7      |\",\n        jira: {\n            fields: { summary:\"Sum of two numbers\", project: {key: \"{{PROJECT_KEY}}\"} }\n        }\n    ) {\n        test {\n            issueId\n            testType {\n                name\n            }\n            gherkin\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "create a gherkin (e.g. Cucumber) test"
									},
									"response": []
								}
							]
						},
						{
							"name": "query details",
							"item": [
								{
									"name": "get tests by JQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Tests returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTests.results).to.have.lengthOf.at.least(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTests(jql: \"project={{PROJECT_KEY}}\", limit: 50) {\n        total\n        start\n        limit\n        results {\n            issueId\n            jira(fields: [\"key\"])\n            projectId\n            testType {\n                name\n                kind\n            }\n            steps {\n                id\n                data\n                action\n                result\n                attachments {\n                    id\n                    filename\n                }\n            }\n            preconditions(limit: 10) {\n                total\n                start\n                limit\n                results {\n                    issueId\n                    jira(fields: [\"key\"])\n                    projectId\n                }\n            }\n        }\n    }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get Tests by JQL, its specification, some Jira fields, and all required preconditions"
									},
									"response": []
								},
								{
									"name": "get test by issue key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTests.results).to.have.lengthOf(1);",
													"    pm.expect(jsonData.data.getTests.results[0].issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getTests(jql: \"key={{T1_KEY}}\", limit: 50) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      testType {\n          name\n          kind\n      },\n      steps {\n          id\n          data\n          action\n          result\n          attachments {\n              id\n              filename\n          }\n      },\n      preconditions(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          projectId\n          jira(fields: [\"key\"])\n        }\n      }\n    }\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get Test by issue key, its specification, some Jira fields, and all required preconditions"
									},
									"response": []
								},
								{
									"name": "get test by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTest.issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTest(issueId: \"{{T1_ID}}\") {\n        issueId\n        testType {\n            name\n            kind\n        },\n        jira(fields: [\"key\"]),\n        steps {\n            id\n            data\n            action\n            result\n            attachments {\n                id\n                filename\n            }\n        },\n        preconditions(limit: 10) {\n          total\n          start\n          limit\n          results {\n            issueId\n            jira(fields: [\"key\"])\n          }\n      }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get Test, its specification, some Jira fields, and all required preconditions"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "test steps",
							"item": [
								{
									"name": "get all test steps",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTest.steps).to.have.lengthOf(4);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTest(issueId: \"{{T1_ID}}\") {\n        steps {\n            id\n            data\n            action\n            result\n            attachments {\n                id\n                filename\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get Test, its specification, some Jira fields, and all required preconditions"
									},
									"response": []
								},
								{
									"name": "add a step, with an attachment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"step updated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.addTestStep.action).to.eq(\"example step5\");",
													"    pm.expect(jsonData.data.addTestStep.data).to.eq(\"example data5\");",
													"    pm.expect(jsonData.data.addTestStep.result).to.eq(\"example result5\");",
													"    pm.expect(jsonData.data.addTestStep.attachments).to.have.lengthOf(1);",
													"",
													"    pm.globals.set(\"T1_NEWSTEP_ID\",jsonData.data.addTestStep.id);",
													"    pm.globals.set(\"T1_NEWSTEP_ATTACH1_ID\",jsonData.data.addTestStep.attachments[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    addTestStep(\n        issueId: \"{{T1_ID}}\",\n        step: {\n            action: \"example step5\",\n            data: \"example data5\"\n            result: \"example result5\",\n            attachments:[\n                    {\n                        data:\"ZHVtbXkgY29udGVudA==\",\n                        filename:\"dummy.txt\",\n                        mimeType:\"text/plain\"\n                    }\n            ]\n        }\n    ) {\n        id\n        action\n        data\n        result\n        attachments {\n            id\n            filename\n            storedInJira\n            downloadLink\n        }\n    }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "modify a step",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"step updated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.updateTestStep.warnings).to.be.empty;",
													"    pm.expect(jsonData.data.updateTestStep.addedAttachments).to.have.lengthOf(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    updateTestStep(\n        stepId: \"{{T1_NEWSTEP_ID}}\",\n        step: {\n            action: \"example step5x\",\n            data: \"example data5x\"\n            result: \"example result5x\",\n            attachments:\n                { \n                    add: {\n                        data:\"ZHVtbXkgY29udGVudA==\",\n                        filename:\"dummy.txt\",\n                        mimeType:\"text/plain\"\n                    }\n                }\n            \n        }\n    ) {\n        addedAttachments\n        warnings\n    }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete a step attachment, by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"attachment removed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.updateTestStep.warnings).to.be.empty;",
													"    pm.expect(jsonData.data.updateTestStep.removedAttachments).to.have.lengthOf(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    updateTestStep(\n        stepId: \"{{T1_NEWSTEP_ID}}\",\n        step: {\n            attachments:\n                { \n                    removeIds: [\"{{T1_NEWSTEP_ATTACH1_ID}}\"]\n                }\n            \n        }\n    ) {\n        removedAttachments\n        warnings\n    }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete a step attachment, by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"attachment removed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.updateTestStep.warnings).to.be.empty;",
													"    pm.expect(jsonData.data.updateTestStep.removedAttachments).to.have.lengthOf(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    updateTestStep(\n        stepId: \"{{T1_NEWSTEP_ID}}\",\n        step: {\n            attachments:\n                { \n                    removeFilenames: [\"dummy.txt\"]\n                }\n            \n        }\n    ) {\n        removedAttachments\n        warnings\n    }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete a step, by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"attachment removed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.removeTestStep).to.include(\"deleted successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    removeTestStep(\n        stepId: \"{{T1_NEWSTEP_ID}}\"\n    )\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "modify details",
							"item": [
								{
									"name": "update unstructured (e.g. generic) test definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test updated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.updateUnstructuredTestDefinition.unstructured).to.eq(\"Generic definition\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    updateUnstructuredTestDefinition(issueId: \"{{T3_ID}}\", unstructured: \"Generic definition\" ) {\n        issueId\n        unstructured\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "update gherkin (e.g. cucumber) test definition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test updated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.updateGherkinTestDefinition.gherkin).to.include(\"| 3       | 6       | add    | 9      |\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    updateGherkinTestDefinition(\n        issueId: \"{{T2_ID}}\",\n        gherkin: \"Given I have entered <input_1> into the calculator\\nAnd I have entered <input_2> into the calculator\\nWhen I press <button>\\nThen the result should be <output> on the screen\\n\\n  Examples:\\n    | input_1 | input_2 | button | output |\\n    | 20      | 30      | add    | 50     |\\n    | 2       | 5       | add    | 7      |\\n    | 3       | 6       | add    | 9      |\" ) \n        {\n        issueId\n        gherkin\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "relations",
							"item": [
								{
									"name": "export test' preconditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTest.preconditions).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTest(issueId: \"{{T1_ID}}\") {\n        issueId\n        testType {\n            name\n            kind\n        },\n        jira(fields: [\"key\"]),\n        preconditions(limit: 10) {\n          total\n          start\n          limit\n          results {\n            issueId\n            jira(fields: [\"key\"])\n            preconditionType {\n                name\n                kind\n            }\n            definition\n          }\n      }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "export test' test sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test sets returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTest.testSets).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTest(issueId: \"{{T1_ID}}\") {\n        issueId\n        testType {\n            name\n            kind\n        },\n        jira(fields: [\"key\"]),\n        testSets(limit: 10) {\n          total\n          start\n          limit\n          results {\n            issueId\n            jira(fields: [\"key\"])\n          }\n      }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "export test' test executions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test executions returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTest.testExecutions).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTest(issueId: \"{{T1_ID}}\") {\n        issueId\n        testType {\n            name\n            kind\n        },\n        jira(fields: [\"key\"]),\n        testExecutions(limit: 10) {\n          total\n          start\n          limit\n          results {\n            issueId\n            jira(fields: [\"key\"])\n          }\n      }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "export test' test plans",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test plans returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTest.testPlans).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTest(issueId: \"{{T1_ID}}\") {\n        issueId\n        testType {\n            name\n            kind\n        },\n        jira(fields: [\"key\"]),\n        testPlans(limit: 10) {\n          total\n          start\n          limit\n          results {\n            issueId\n            jira(fields: [\"key\"])\n          }\n      }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "test repository",
							"item": [
								{
									"name": "move test to a test repository folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test moved\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.updateTestFolder).to.not.be.undefined;",
													"    pm.expect(jsonData.data.updateTestFolder).to.include(\"Test moved\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    updateTestFolder(\n        issueId: \"{{T1_ID}}\",\n        folderPath: \"/\"\n    )\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete test (TEMP_TEST1_ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test deleted\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    deleteTest(issueId: \"{{TEMP_TEST1_ID}}\")\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "create a structured (e.g. Manual, step-based) precondition"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "preconditions",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "create manual precondition (TEMP_PRECONDITION_ID1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Precondition created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createPrecondition.precondition.issueId).to.not.be.empty;",
													"    pm.globals.set(\"TEMP_PRECONDITION1_ID\",jsonData.data.createPrecondition.precondition.issueId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createPrecondition(\n        preconditionType: { name: \"Manual\" }\n        definition: \"calculator turned on\"\n        jira: {\n            fields: { summary:\"TEMP_PRECONDITION1_ID\", project: {key: \"{{PROJECT_KEY}}\"} }\n        }\n    ) {\n        precondition {\n            issueId\n            preconditionType {\n                name\n            }\n            definition\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "create a structured (e.g. Manual, step-based) precondition"
									},
									"response": []
								},
								{
									"name": "create generic precondition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Precondition created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createPrecondition.precondition.issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createPrecondition(\n        preconditionType: { name: \"Generic\" }\n        definition: \"calculator turned on\"\n        jira: {\n            fields: { summary:\"Generic Precondition\", project: {key: \"{{PROJECT_KEY}}\"} }\n        }\n    ) {\n        precondition {\n            issueId\n            preconditionType {\n                name\n            }\n            definition\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "create an unstructured (e.g. Generic) precondition"
									},
									"response": []
								},
								{
									"name": "create cucumber precondition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Precondition created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createPrecondition.precondition.issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createPrecondition(\n        preconditionType: { name: \"Cucumber\" }\n        definition: \"Given I have a calculator\"\n        jira: {\n            fields: { summary:\"Calculator exists\", project: {key: \"{{PROJECT_KEY}}\"} }\n        }\n    ) {\n        precondition {\n            issueId\n            preconditionType {\n                name\n            }\n            definition\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "create a gherkin (e.g. Cucumber Background) precondition"
									},
									"response": []
								}
							]
						},
						{
							"name": "query details",
							"item": [
								{
									"name": "get preconditions by JQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Preconditions returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getPreconditions.results).to.have.lengthOf.at.least(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getPreconditions(jql: \"project={{PROJECT_KEY}}\", limit: 50) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      preconditionType {\n          name\n          kind\n      }\n      definition\n      tests(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          jira(fields: [\"key\"])\n          projectId\n          testType {\n              name\n              kind\n          }\n        }\n      }\n    }\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get preconditions by JQL, its specification, some Jira fields, and all related tests"
									},
									"response": []
								},
								{
									"name": "get precondition by issue key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Precondition returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getPreconditions.results).to.have.lengthOf(1);",
													"    pm.expect(jsonData.data.getPreconditions.results[0].issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getPreconditions(jql: \"key={{P1_KEY}}\", limit: 1) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      preconditionType {\n          name\n          kind\n      }\n      definition\n      tests(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          jira(fields: [\"key\"])\n          projectId\n          testType {\n              name\n              kind\n          }\n        }\n      }\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get precondition by issue key, its specification, some Jira fields, and all related tests"
									},
									"response": []
								},
								{
									"name": "get precondition by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Precondition returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getPrecondition.issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getPrecondition(issueId: \"{{P1_ID}}\") {\n        issueId\n        jira(fields: [\"key\"])\n        preconditionType {\n            name\n            kind\n        }\n        definition\n        tests(limit: 10) {\n            total\n            start\n            limit\n            results {\n            issueId\n            jira(fields: [\"key\"])\n            projectId\n            testType {\n                name\n                kind\n            }\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get precondition by id, its specification, some Jira fields, and all related tests"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "relations",
							"item": [
								{
									"name": "add test to a precondition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test associated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.addTestsToPrecondition).to.not.be.empty;",
													"    pm.expect(jsonData.data.addTestsToPrecondition.addedTests[0]).to.eq(pm.variables.get(\"T1_ID\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    addTestsToPrecondition(\n        issueId: \"{{P1_ID}}\",\n        testIssueIds: [\"{{T1_ID}}\"]\n    ) {\n        addedTests\n        warning\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "get tests associated to precondition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Tests returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getPrecondition.tests.total).to.eq(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getPrecondition(issueId: \"{{P1_ID}}\") {\n        issueId\n        jira(fields: [\"key\"])\n        tests(limit: 10) {\n            total\n            start\n            limit\n            results {\n                issueId\n                jira(fields: [\"key\"])\n                projectId\n                testType {\n                    name\n                    kind\n                }\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get tests associated to precondition, including some Jira fields"
									},
									"response": []
								},
								{
									"name": "export test' preconditions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"preconditions returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTest.issueId).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTest.preconditions.total).to.eq(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTest(issueId: \"{{T1_ID}}\") {\n        issueId\n        testType {\n            name\n            kind\n        },\n        jira(fields: [\"key\"]),\n        preconditions(limit: 10) {\n          total\n          start\n          limit\n          results {\n            issueId\n            jira(fields: [\"key\"])\n          }\n      }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove test from precondition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test removed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.removeTestsFromPrecondition).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    removeTestsFromPrecondition(\n        issueId: \"{{P1_ID}}\",\n        testIssueIds: [\"{{T1_ID}}\"]\n    ) \n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete precondition (TEMP_PRECONDITION1_ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Precondition deleted\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    deletePrecondition(issueId: \"{{TEMP_PRECONDITION1_ID}}\")\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "test sets",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "create empty test set  (TEMP_TESTSET1_ID1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Set created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTestSet.testSet.issueId).to.not.be.empty;",
													"    pm.globals.set(\"TEMP_TESTSET1_ID\",jsonData.data.createTestSet.testSet.issueId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createTestSet(\n        testIssueIds: []\n        jira: {\n            fields: {\n                summary: \"empty Test Set\",\n                project: {key: \"{{PROJECT_KEY}}\"} \n            }\n        }\n    ) {\n        testSet {\n            issueId\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "create test set with a test",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Set created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTestSet.testSet.issueId).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTestSet.testSet.tests.results[0].issueId).to.eq(pm.variables.get(\"T1_ID\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createTestSet(\n        testIssueIds: [\"{{T1_ID}}\"]\n        jira: {\n            fields: { \n                summary: \"dummy Test Set\", \n                project: {key: \"{{PROJECT_KEY}}\"} \n            }\n        }\n    ) {\n        testSet {\n            issueId\n            jira(fields: [\"key\"])\n            tests(limit: 10) {\n                    total\n                    start\n                    limit\n                    results {\n                        issueId\n                        jira(fields: [\"key\"])\n                        projectId\n                        testType {\n                            name\n                            kind\n                        }\n                    }\n                }            \n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete test set (TEMP_TESTSET1_ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Set deleted\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    deleteTestSet(issueId: \"{{TEMP_TESTSET1_ID}}\")\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "query details",
							"item": [
								{
									"name": "get testsets by JQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Sets returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestSets.results).to.have.lengthOf.at.least(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getTestSets(jql: \"project={{PROJECT_KEY}}\", limit: 50) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      tests(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          jira(fields: [\"key\"])\n          projectId\n          testType {\n              name\n              kind\n          }\n        }\n      }\n    }\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get test sets by JQL including some Jira fields, and all related tests"
									},
									"response": []
								},
								{
									"name": "get testset by issue key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Set returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestSets.results).to.have.lengthOf(1);",
													"    pm.expect(jsonData.data.getTestSets.results[0].issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getTestSets(jql: \"key={{TS1_KEY}}\", limit: 1) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      tests(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          jira(fields: [\"key\"])\n          projectId\n          testType {\n              name\n              kind\n          }\n        }\n      }\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get test set by issue key, including some Jira fields, and all related tests"
									},
									"response": []
								},
								{
									"name": "get testset by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Set returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestSet.issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestSet(issueId: \"{{TS1_ID}}\") {\n        issueId\n        jira(fields: [\"key\"])\n        tests(limit: 10) {\n            total\n            start\n            limit\n            results {\n                issueId\n                jira(fields: [\"key\"])\n                projectId\n                testType {\n                    name\n                    kind\n                }\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get test set by id, including some Jira fields, and all related tests"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "relations",
							"item": [
								{
									"name": "add test to a test set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test associated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.addTestsToTestSet).to.not.be.empty;",
													"    pm.expect(jsonData.data.addTestsToTestSet.addedTests[0]).to.eq(pm.variables.get(\"T1_ID\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    addTestsToTestSet(\n        issueId: \"{{TS1_ID}}\",\n        testIssueIds: [\"{{T1_ID}}\"]\n    ) {\n        addedTests\n        warning\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "get tests associated to test set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Tests returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    //pm.expect(jsonData.data.getTestSet.issueId).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestSet.tests.total).to.eq(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestSet(issueId: \"{{TS1_ID}}\") {\n        issueId\n        jira(fields: [\"key\"])\n        tests(limit: 10) {\n            total\n            start\n            limit\n            results {\n                issueId\n                jira(fields: [\"key\"])\n                projectId\n                testType {\n                    name\n                    kind\n                }\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove test from test set",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test removed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.removeTestsFromTestSet).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    removeTestsFromTestSet(\n        issueId: \"{{TS1_ID}}\",\n        testIssueIds: [\"{{T1_ID}}\"]\n    ) \n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "test executions",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "create empty test execution  (TEMP_TESTEXEC1_ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTestExecution.testExecution.issueId).to.not.be.empty;",
													"    pm.globals.set(\"TEMP_TESTEXEC1_ID\",jsonData.data.createTestExecution.testExecution.issueId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createTestExecution(\n        testIssueIds: []\n        jira: {\n            fields: {\n                summary: \"empty Test Execution\",\n                project: {key: \"{{PROJECT_KEY}}\"} \n            }\n        }\n    ) {\n        testExecution {\n            issueId\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "create test execution with a test, assigned to a Test Environment and a version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTestExecution.testExecution.issueId).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTestExecution.testExecution.tests.results[0].issueId).to.eq(pm.variables.get(\"T1_ID\"));",
													"    //pm.expect(jsonData.data.createTestExecution.warnings).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createTestExecution(\n        testIssueIds: [\"{{T1_ID}}\"],\n        testEnvironments: [\"chrome\"]\n        jira: {\n            fields: { \n                summary: \"dummy Test Execution\", \n                project: {key: \"{{PROJECT_KEY}}\"},\n                fixVersions: [ {name: \"{{PROJECT_VERSION}}\"} ]\n            }\n        }\n    ) {\n        testExecution {\n            issueId\n            jira(fields: [\"key\"])\n            tests(limit: 10) {\n                    total\n                    start\n                    limit\n                    results {\n                        issueId\n                        jira(fields: [\"key\"])\n                        projectId\n                        testType {\n                            name\n                            kind\n                        }\n                    }\n                }            \n        }\n        warnings\n        createdTestEnvironments\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "query details",
							"item": [
								{
									"name": "get test executions by JQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Executions returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestExecutions.results).to.have.lengthOf.at.least(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getTestExecutions(jql: \"project={{PROJECT_KEY}}\", limit: 50) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      tests(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          jira(fields: [\"key\"])\n          projectId\n          testType {\n              name\n              kind\n          }\n        }\n      }\n    }\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get test executions by JQL including some Jira fields, and all related tests"
									},
									"response": []
								},
								{
									"name": "get test execution by issue key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestExecutions.results).to.have.lengthOf(1);",
													"    pm.expect(jsonData.data.getTestExecutions.results[0].issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getTestExecutions(jql: \"key={{TE1_KEY}}\", limit: 1) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      tests(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          jira(fields: [\"key\"])\n          projectId\n          testType {\n              name\n              kind\n          }\n        }\n      }\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get test execution by issue key, including some Jira fields, and all related tests"
									},
									"response": []
								},
								{
									"name": "get test execution by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestExecution.issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestExecution(issueId: \"{{TE1_ID}}\") {\n        issueId\n        jira(fields: [\"key\"])\n        tests(limit: 10) {\n            total\n            start\n            limit\n            results {\n                issueId\n                jira(fields: [\"key\"])\n                projectId\n                testType {\n                    name\n                    kind\n                }\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get test execution by id, including some Jira fields, and all related tests"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "relations",
							"item": [
								{
									"name": "tests",
									"item": [
										{
											"name": "add test to a test execution",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test associated\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.addTestsToTestExecution).to.not.be.undefined;",
															"    pm.expect(jsonData.data.addTestsToTestExecution.addedTests[0]).to.eq(pm.variables.get(\"T1_ID\"));",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    addTestsToTestExecution(\n        issueId: \"{{TEMP_TESTEXEC1_ID}}\",\n        testIssueIds: [\"{{T1_ID}}\"]\n    ) {\n        addedTests\n        warning\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "get tests associated to test execution",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Tests returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    //pm.expect(jsonData.data.getTestSet.issueId).to.not.be.empty;",
															"    pm.expect(jsonData.data.getTestExecution.tests.total).to.eq(3);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n    getTestExecution(issueId: \"{{TE1_ID}}\") {\n        issueId\n        jira(fields: [\"key\"])\n        tests(limit: 10) {\n            total\n            start\n            limit\n            results {\n                issueId\n                jira(fields: [\"key\"])\n                projectId\n                testType {\n                    name\n                    kind\n                }\n            }\n        }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "remove test from test execution",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test removed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.removeTestsFromTestExecution).to.not.be.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    removeTestsFromTestExecution(\n        issueId: \"{{TEMP_TESTEXEC1_ID}}\",\n        testIssueIds: [\"{{T1_ID}}\"]\n    ) \n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "test runs",
									"item": [
										{
											"name": "get testruns (and corresponding tests) associated to test execution",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test runs returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.getTestExecution.testRuns).to.not.be.empty;",
															"    pm.expect(jsonData.data.getTestExecution.testRuns.results).to.have.lengthOf(3);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n    getTestExecution(issueId: \"{{TE1_ID}}\") {\n        issueId\n        jira(fields: [\"key\"])\n    \n          testRuns(limit: 100){\n            results{\n              id\n              status{\n                name\n                description\n              }\n              comment\n              testType{\n                name\n              }\n              evidence{\n                filename\n              }\n              defects\n              executedById\n              startedOn\n              finishedOn\n              assigneeId\n\n              steps {\n                  id\n                  action\n                  data\n                  result\n              }\n\n              scenarioType\n              gherkin\n              examples {\n                  id\n                  status {\n                      name\n                      description\n                  }\n                  duration\n              }\n\n              unstructured\n              \n              customFields {\n                  id\n                  name\n                  values\n              }\n\n              preconditions(limit:10) {\n                results{\n                    preconditionRef {\n                        issueId\n                        jira(fields: [\"key\"])\n                    }\n                    definition\n                }\n              }\n              test {\n                  issueId\n                  jira(fields: [\"key\"])\n                    projectId\n                    testType {\n                        name\n                        kind\n                    }\n              }\n              \n            }\n        }\n\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												},
												"description": "extensive example"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete test execution (TEMP_TESTEXEC1_ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Execution deleted\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    deleteTestExecution(issueId: \"{{TEMP_TESTEXEC1_ID}}\")\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "test runs",
					"item": [
						{
							"name": "export",
							"item": [
								{
									"name": "get test runs by test and/or test execution issue ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test runs returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestRuns.results).to.have.lengthOf(3);",
													"    pm.expect(jsonData.data.getTestRuns.total).to.eq(3);",
													"",
													"   for (var idx = 0;idx<jsonData.data.getTestRuns.results.length;idx++) {",
													"        var testIssueId = jsonData.data.getTestRuns.results[idx].test.issueId;",
													"        if (testIssueId == pm.variables.get(\"T1_ID\")) {",
													"            pm.globals.set(\"TR1_ID\",jsonData.data.getTestRuns.results[idx].id);",
													"        } else",
													"        if (testIssueId == pm.variables.get(\"T2_ID\")) {",
													"            pm.globals.set(\"TR2_ID\",jsonData.data.getTestRuns.results[idx].id);",
													"        } else",
													"        if (testIssueId == pm.variables.get(\"T3_ID\")) {",
													"            pm.globals.set(\"TR3_ID\",jsonData.data.getTestRuns.results[idx].id);",
													"        } ",
													"    }",
													"",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestRuns( testIssueIds: [\"{{T1_ID}}\", \"{{T2_ID}}\", \"{{T3_ID}}\" ], testExecIssueIds: [\"{{TE1_ID}}\"], limit: 100 ) {\n        total\n        limit\n        start\n        results {\n            id\n            status {\n                name\n                color\n                description\n            }\n            gherkin\n            examples {\n                id\n                status {\n                name\n                color\n                description\n                }\n            }\n            test {\n                issueId\n                jira(fields: [\"key\"])\n            }\n            testExecution {\n                issueId\n                jira(fields: [\"key\"])\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "details",
							"item": [
								{
									"name": "get test run by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestRunById.status).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestRunById( id: \"{{TR1_ID}}\") {\n        id\n        status {\n            name\n            color\n            description\n        }\n        steps {\n            action\n            data\n            result\n            attachments {\n                id\n                filename\n            }\n            status {\n                name\n                color\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "get test run by test and test execution issue ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestRun.id).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestRun( testIssueId: \"{{T1_ID}}\", testExecIssueId: \"{{TE1_ID}}\") {\n        id\n        status {\n            name\n            color\n            description\n        }\n        steps {\n            action\n            data\n            result\n            attachments {\n                id\n                filename\n            }\n            status {\n                name\n                color\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "update test run by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test run updated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.updateTestRun.warnings).to.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    updateTestRun( \n            id: \"{{TR1_ID}}\",\n            comment: \"Everything is OK.\"\n        )  {\n            warnings\n        }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "status",
							"item": [
								{
									"name": "get test run status by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestRunById.status).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestRunById( id: \"{{TR3_ID}}\") {\n        status {\n            name\n            color\n            description\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "update test run status by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test run updated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.updateTestRunStatus).to.eq(\"Success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    updateTestRunStatus( \n            id: \"{{TR3_ID}}\",\n            status: \"PASSED\"\n        ) \n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "defects",
							"item": [
								{
									"name": "add/link defects to test run",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"defect linked to test run\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.addDefectsToTestRun.warnings).to.be.empty;",
													"    pm.expect(jsonData.data.addDefectsToTestRun.addedDefects).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    addDefectsToTestRun( \n            id: \"{{TR1_ID}}\",\n            issues: [\"{{D1_KEY}}\"]\n        ) {\n            addedDefects\n            warnings\n        }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "get test run defects",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"defect returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestRunById.defects).to.have.lengthOf(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestRunById( id: \"{{TR1_ID}}\") {\n        id\n        defects\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove/unlink defects from test run",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"defect unlinked from test run\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.removeDefectsFromTestRun).to.include(\"successfully removed\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    removeDefectsFromTestRun( \n            id: \"{{TR1_ID}}\",\n            issues: [\"{{D1_KEY}}\"]\n        ) \n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "evidence",
							"item": [
								{
									"name": "add evidence/attachment(s) to the test run",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"evidence added to test run\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.addEvidenceToTestRun.warnings).to.be.empty;",
													"    pm.expect(jsonData.data.addEvidenceToTestRun.addedEvidence).to.not.be.empty;",
													"    pm.globals.set(\"TR1_ATTACH1_NAME\",jsonData.data.addEvidenceToTestRun.addedEvidence[0]);",
													"    // instead of the filename, the API should return a evidence object",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    addEvidenceToTestRun( \n            id: \"{{TR1_ID}}\",\n            evidence: [\n                {\n                data: \"ZHVtbXkgY29udGVudA==\",\n                filename: \"dummy.txt\",\n                mimeType: \"text/plain\"\n                }\n            ]\n        ) {\n            addedEvidence\n            warnings\n        }\n}\n\n\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "get all evidence/attachment(s) linked to the test run",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"evidence returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestRunById.evidence).to.have.lengthOf(1);",
													"    pm.globals.set(\"TR1_ATTACH1_ID\",sonData.data.addEvidenceToTestRun.addedEvidence[0].id);",
													"    pm.globals.set(\"TR1_ATTACH1_NAME\",sonData.data.addEvidenceToTestRun.addedEvidence[0].filename);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestRunById( id: \"{{TR1_ID}}\") {\n        id\n        evidence {\n            id\n            filename\n            storedInJira\n            downloadLink\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete evidence/attachment by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"evidence removed from test run\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.removeEvidenceFromTestRun.warnings).to.be.empty;",
													"    pm.expect(jsonData.data.removeEvidenceFromTestRun.removedEvidence).to.have.lengthOf(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    removeEvidenceFromTestRun(\n        id: \"{{TR1_ID}}\",\n        evidenceIds: [\"{{TR1_ATTACH1_ID}}\"]\n    ) {\n        removedEvidence\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete evidence/attachment by name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"defect unlinked from test run\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.removeEvidenceFromTestRun.warnings).to.be.empty;",
													"    pm.expect(jsonData.data.removeEvidenceFromTestRun.removedEvidence).to.have.lengthOf(1);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    removeEvidenceFromTestRun(\n        id: \"{{TR1_ID}}\",\n        evidenceFilenames: [\"dummy.txt\"]\n    ) {\n        removedEvidence\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "comment",
							"item": [
								{
									"name": "get test run comment by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestRunById.comment).to.eq(\"Successful execution\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestRunById( id: \"{{TR3_ID}}\") {\n        comment\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "update test run comment by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test run updated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.updateTestRunComment).to.eq(\"Success\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    updateTestRunComment( \n            id: \"{{TR1_ID}}\",\n            comment: \"My new comment\"\n        )  \n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "test step results",
							"item": [
								{
									"name": "overall",
									"item": [
										{
											"name": "get all test run' steps",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test run steps returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.getTestRunById.steps).to.have.lengthOf(4);",
															"    pm.globals.set(\"TR1_STEP1_ID\",jsonData.data.getTestRunById.steps[0].id);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n    getTestRunById( id: \"{{TR1_ID}}\") {\n        steps {\n            id\n            action\n            data\n            result\n            comment\n            evidence {\n                id\n                filename\n            }\n            defects\n            status {\n                name\n                color\n            }\n        }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "status",
									"item": [
										{
											"name": "set test run' step status by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test run updated\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.updateTestRunStepStatus.warnings).to.be.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    updateTestRunStepStatus(\n        testRunId: \"{{TR1_ID}}\",\n        stepId: \"{{TR1_STEP1_ID}}\",\n        status: \"FAILED\"\n    ) {\n        warnings\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "evidence",
									"item": [
										{
											"name": "add evidence/attachment(s) to the test run step",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"evidence added to test run step\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.addEvidenceToTestRunStep.addedEvidence).to.have.lengthOf(1);",
															"    pm.expect(jsonData.data.addEvidenceToTestRunStep.warnings).to.be.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    addEvidenceToTestRunStep(\n        testRunId: \"{{TR1_ID}}\",\n        stepId: \"{{TR1_STEP1_ID}}\",\n        evidence: [\n            {\n                filename: \"dummy.txt\"\n                mimeType: \"text/plain\"\n                data: \"ZHVtbXkgY29udGVudA==\"\n            }\n        ]\n    ) {\n        addedEvidence\n        warnings\n    }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "get all test run' steps (including the first one)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test run steps returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.getTestRunById.steps).to.have.lengthOf(4);",
															"    pm.globals.set(\"TR1_STEP1_ID\",jsonData.data.getTestRunById.steps[0].id);",
															"    pm.globals.set(\"TR1_STEP1_ATTACH1_ID\",jsonData.data.getTestRunById.steps[0].evidence[0].id);",
															"    pm.globals.set(\"TR1_STEP1_ATTACH1_NAME\",jsonData.data.getTestRunById.steps[0].evidence[0].filename);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n    getTestRunById( id: \"{{TR1_ID}}\") {\n        steps {\n            id\n            action\n            data\n            result\n            comment\n            evidence {\n                id\n                filename\n            }\n            defects\n            status {\n                name\n                color\n            }\n        }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete evidence/attachment in test run step by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"evidence removed from test run step\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.removeEvidenceFromTestRunStep.removedEvidence).to.have.lengthOf(1);",
															"    pm.expect(jsonData.data.removeEvidenceFromTestRunStep.warnings).to.be.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    removeEvidenceFromTestRunStep(\n        testRunId: \"{{TR1_ID}}\",\n        stepId: \"{{TR1_STEP1_ID}}\",\n        evidenceIds: [\"{{TR1_STEP1_ATTACH1_ID}}\"]\n    ) {\n        removedEvidence\n        warnings\n    }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "delete evidence/attachment in test run step by name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"evidence removed from test run step\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.removeEvidenceFromTestRunStep.removedEvidence).to.have.lengthOf(1);",
															"    pm.expect(jsonData.data.removeEvidenceFromTestRunStep.warnings).to.be.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    removeEvidenceFromTestRunStep(\n        testRunId: \"{{TR1_ID}}\",\n        stepId: \"{{TR1_STEP1_ID}}\",\n        evidenceFilenames: [\"dummy.txt\"]\n    ) {\n        removedEvidence\n        warnings\n    }\n}\n",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "defects",
									"item": [
										{
											"name": "add/link defects to test run step",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"defect linked to test run\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.addDefectsToTestRunStep.warnings).to.be.empty;",
															"    pm.expect(jsonData.data.addDefectsToTestRunStep.addedDefects).to.not.be.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    addDefectsToTestRunStep( \n            testRunId: \"{{TR1_ID}}\",\n            stepId: \"{{TR1_STEP1_ID}}\", \n            issues: [\"{{D1_KEY}}\"]\n        ) {\n            addedDefects\n            warnings\n        }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "get test run step defects (including for first step)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"defects returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.getTestRunById.steps[0].defects).to.have.lengthOf(1);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n    getTestRunById( id: \"{{TR1_ID}}\") {\n        steps {\n            defects\n        }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "remove/unlink defects from test run Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"defect unlinked from test run\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.removeDefectsFromTestRunStep.removedDefects).to.have.lengthOf(1);",
															"    pm.expect(jsonData.data.removeDefectsFromTestRunStep.warnings).to.be.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    removeDefectsFromTestRunStep( \n            testRunId: \"{{TR1_ID}}\",\n            stepId: \"{{TR1_STEP1_ID}}\", \n            issues: [\"{{D1_KEY}}\"]\n        )  {\n        removedDefects\n        warnings\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "comment",
									"item": [
										{
											"name": "get test run step comments (including for first step)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"comment returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.getTestRunById.steps[0].comment).to.eq(\"Comment on Test Step Result 1\");",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n    getTestRunById( id: \"{{TR1_ID}}\") {\n        steps {\n            comment\n        }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "set test run' step comment by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test run updated\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.updateTestRunStepComment).to.eq(\"Success\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    updateTestRunStepComment(\n        testRunId: \"{{TR1_ID}}\",\n        stepId: \"{{TR1_STEP1_ID}}\",\n        comment: \"it failed\"\n    )\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "cucumber/gherkin scenario outline examples",
							"item": [
								{
									"name": "get outline example details, by index",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"scenario outline examples returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestRunById.examples).to.have.lengthOf(2);",
													"    pm.globals.set(\"TR2_EXAMPLE1_ID\",jsonData.data.getTestRunById.examples[0].id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestRunById( id: \"{{TR2_ID}}\") {\n        id\n        status {\n            name\n            color\n            description\n        }\n        examples {\n            id\n            status {\n                name\n            }\n            duration\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "update outline example details, by index",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"test run example updated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.updateTestRunExampleStatus.warnings).to.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    updateTestRunExampleStatus(\n        exampleId: \"{{TR2_EXAMPLE1_ID}}\",\n        status: \"PASSED\"\n    ) {\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "test plans",
					"item": [
						{
							"name": "create",
							"item": [
								{
									"name": "create empty test plan  (TEMP_TESTPLAN1_ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Plan created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTestPlan.testPlan.issueId).to.not.be.empty;",
													"    pm.globals.set(\"TEMP_TESTPLAN1_ID\",jsonData.data.createTestPlan.testPlan.issueId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createTestPlan(\n        testIssueIds: []\n        jira: {\n            fields: {\n                summary: \"empty Test Plan\",\n                project: {key: \"{{PROJECT_KEY}}\"} \n            }\n        }\n    ) {\n        testPlan {\n            issueId\n            jira(fields: [\"key\"])\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "create test plan with a test, assigned to a version",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Plan created\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTestPlan.testPlan.issueId).to.not.be.empty;",
													"    pm.expect(jsonData.data.createTestPlan.testPlan.tests.results[0].issueId).to.eq(pm.variables.get(\"T1_ID\"));",
													"    //pm.expect(jsonData.data.createTestPlan.warnings).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createTestPlan(\n        testIssueIds: [\"{{T1_ID}}\"]\n        jira: {\n            fields: { \n                summary: \"dummy Test Plan\", \n                project: {key: \"{{PROJECT_KEY}}\"} \n            }\n        }\n    ) {\n        testPlan {\n            issueId\n            jira(fields: [\"key\"])\n            tests(limit: 10) {\n                    total\n                    start\n                    limit\n                    results {\n                        issueId\n                        jira(fields: [\"key\"])\n                        projectId\n                        testType {\n                            name\n                            kind\n                        }\n                    }\n                }            \n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "query details",
							"item": [
								{
									"name": "get test plans by JQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Plans returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestPlans.results).to.have.lengthOf.at.least(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getTestPlans(jql: \"project={{PROJECT_KEY}}\", limit: 50) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      tests(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          jira(fields: [\"key\"])\n          projectId\n          testType {\n              name\n              kind\n          }\n          status {\n              name\n          }\n        }\n      }\n    }\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get test plans by JQL including some Jira fields, and all related tests"
									},
									"response": []
								},
								{
									"name": "get test plan by issue key, along with their consolidated status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Set returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestPlans.results).to.have.lengthOf(1);",
													"    pm.expect(jsonData.data.getTestPlans.results[0].issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getTestPlans(jql: \"key={{TP1_KEY}}\", limit: 1) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      tests(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          jira(fields: [\"key\"])\n          projectId\n          testType {\n              name\n              kind\n          }\n          status {\n              name\n          }\n        }\n      }\n    }\n  }\n}\n",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get test plan by issue key, including some Jira fields, and all related tests"
									},
									"response": []
								},
								{
									"name": "get test plan by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Plan returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTestPlan.issueId).to.not.be.empty;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getTestPlan(issueId: \"{{TP1_ID}}\") {\n        issueId\n        jira(fields: [\"key\"])\n        tests(limit: 10) {\n            total\n            start\n            limit\n            results {\n                issueId\n                jira(fields: [\"key\"])\n                projectId\n                testType {\n                    name\n                    kind\n                }\n                status {\n                    name\n                }\n            }\n        }\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										},
										"description": "get test plan by id, including some Jira fields, and all related tests"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "relations",
							"item": [
								{
									"name": "tests",
									"item": [
										{
											"name": "add test to a test plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test associated\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.addTestsToTestPlan).to.not.be.undefined;",
															"    pm.expect(jsonData.data.addTestsToTestPlan.addedTests[0]).to.eq(pm.variables.get(\"T1_ID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    addTestsToTestPlan(\n        issueId: \"{{TP1_ID}}\",\n        testIssueIds: [\"{{T1_ID}}\"]\n    ) {\n        addedTests\n        warning\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "get tests associated to test plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Tests returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.getTestPlan.tests.total).to.eq(1);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n    getTestPlan(issueId: \"{{TP1_ID}}\") {\n        issueId\n        jira(fields: [\"key\"])\n        tests(limit: 10) {\n            total\n            start\n            limit\n            results {\n                issueId\n                jira(fields: [\"key\"])\n                projectId\n                testType {\n                    name\n                    kind\n                }\n            }\n        }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "remove test from test plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test removed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.removeTestsFromTestPlan).to.not.be.empty;",
															"    pm.expect(jsonData.data.removeTestsFromTestPlan).to.include(\"successfully removed\")",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    removeTestsFromTestPlan(\n        issueId: \"{{TP1_ID}}\",\n        testIssueIds: [\"{{T1_ID}}\"]\n    ) \n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "test executions",
									"item": [
										{
											"name": "add test execution to a test plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test associated\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.addTestExecutionsToTestPlan).to.not.be.undefined;",
															"    pm.expect(jsonData.data.addTestExecutionsToTestPlan.addedTestExecutions[0]).to.eq(pm.variables.get(\"TE1_ID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    addTestExecutionsToTestPlan(\n        issueId: \"{{TP1_ID}}\",\n        testExecIssueIds: [\"{{TE1_ID}}\"]\n    ) {\n        addedTestExecutions\n        warning\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "get test executions associated to test plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Test executions returned\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.getTestPlan.testExecutions.total).to.eq(1);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n    getTestPlan(issueId: \"{{TP1_ID}}\") {\n        issueId\n        jira(fields: [\"key\"])\n        testExecutions(limit: 10) {\n            total\n            start\n            limit\n            results {\n                issueId\n                jira(fields: [\"key\"])\n                projectId\n                testEnvironments\n            }\n        }\n    }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										},
										{
											"name": "remove test execution from test plan",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"test execution removed\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.data).to.not.be.empty;",
															"    pm.expect(jsonData.data.removeTestExecutionsFromTestPlan).to.not.be.empty;",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{AUTH_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "mutation {\n    removeTestExecutionsFromTestPlan(\n        issueId: \"{{TP1_ID}}\",\n        testExecIssueIds: [\"{{TE1_ID}}\"]\n    ) \n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{XRAY_API_BASEURL}}/graphql",
													"host": [
														"{{XRAY_API_BASEURL}}"
													],
													"path": [
														"graphql"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "delete",
							"item": [
								{
									"name": "delete test plan (TEMP_TESTPLAN1_ID)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Test Plan deleted\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.errors).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    deleteTestPlan(issueId: \"{{TEMP_TESTPLAN1_ID}}\")\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "test repository",
					"item": [
						{
							"name": "hierarchy",
							"item": [
								{
									"name": "get Test Repository's folder hierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"folder returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getFolder.path).to.eq(\"/\");",
													"    pm.expect(jsonData.data.getFolder.testsCount).to.be.gt(0);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getFolder(projectId: \"{{PROJECT_ID}}\", path: \"/\") {\n        name\n        path\n        testsCount\n        folders\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "folders",
							"item": [
								{
									"name": "create folder in Test Repository by path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"folder created\", function () {",
													"    var jsonData = pm.response.json();",
													"    if (jsonData.errors != undefined)",
													"    {",
													"        pm.expect(jsonData.errors[0].message).to.include(\"already exists\");",
													"        pm.globals.set(\"F3_PATH\",\"/Dummy\");",
													"        pm.globals.set(\"F3_NAME\",\"Dummy\");",
													"    } else {",
													"        pm.expect(jsonData.data).to.not.be.empty;",
													"        pm.expect(jsonData.data.createFolder).to.not.be.undefined;",
													"        pm.expect(jsonData.data.createFolder.folder.path).to.eq(\"/Dummy\");",
													"        pm.globals.set(\"F3_PATH\",jsonData.data.createFolder.folder.path);",
													"        pm.globals.set(\"F3_NAME\",jsonData.data.createFolder.folder.name);",
													"    }",
													"",
													"",
													"",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    createFolder(\n        projectId: \"{{PROJECT_ID}}\"\n        path: \"/Dummy\"\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "get details of a test repository's folder by path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"folder returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getFolder.name).to.eq(\"Postman F1\");",
													"    pm.expect(jsonData.data.getFolder.path).to.eq(\"/Postman F1\");",
													"    pm.expect(jsonData.data.getFolder.testsCount).to.be.gt(0);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n    getFolder(projectId: \"{{PROJECT_ID}}\", path: \"{{F1_PATH}}\") {\n        name\n        path\n        testsCount\n        #folders\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "rename test repository's folder by path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"folder renamed\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.renameFolder).to.not.be.undefined;",
													"    pm.expect(jsonData.data.renameFolder.folder.name).to.eq(\"Dummy2\");",
													"    pm.expect(jsonData.data.renameFolder.folder.path).to.eq(\"/Dummy2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    renameFolder(\n        projectId: \"{{PROJECT_ID}}\",\n        path: \"{{F3_PATH}}\",\n        newName: \"Dummy2\"\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "move test repository's folder by path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"folder moved\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.renameFolder).to.not.be.undefined;",
													"    pm.expect(jsonData.data.renameFolder.folder.name).to.eq(\"Dummy\");",
													"    pm.expect(jsonData.data.renameFolder.folder.path).to.eq(\"/Dummy\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    moveFolder(\n        projectId: \"{{PROJECT_ID}}\",\n        path: \"{{F3_PATH}}2\",\n        destinationPath: \"{{F1_PATH}}\"\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete test repository's folder by path",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"folder deleted\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.deleteFolder).to.not.be.undefined;",
													"    pm.expect(jsonData.data.deleteFolder).to.include(\"successfully\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    deleteFolder(\n        projectId: \"{{PROJECT_ID}}\",\n        path: \"{{F1_PATH}}/Dummy2\"\n    ) \n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "tests",
							"item": [
								{
									"name": "get tests within a specific folder in the test repository",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Tests returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTests.results).to.have.lengthOf.at.least(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getTests(projectId: \"{{PROJECT_ID}}\", folder: { path: \"{{F1_PATH}}\" , includeDescendants: false }, limit: 50) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      testType {\n          name\n          kind\n      },\n      steps {\n          id\n          data\n          action\n          result\n          attachments {\n              id\n              filename\n          }\n      },\n      preconditions(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          jira(fields: [\"key\"])\n          projectId\n        }\n      }\n    }\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "get tests within a specific folder, and nested subfolders, in the test repository",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Tests returned\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.getTests.results).to.have.lengthOf.at.least(1);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  getTests(projectId: \"{{PROJECT_ID}}\", folder: { path: \"/\" , includeDescendants: true }, limit: 50) {\n    total\n    start\n    limit\n    results {\n      issueId\n      jira(fields: [\"key\"])\n      projectId\n      testType {\n          name\n          kind\n      },\n      steps {\n          id\n          data\n          action\n          result\n          attachments {\n              id\n              filename\n          }\n      },\n      preconditions(limit: 10) {\n        total\n        start\n        limit\n        results {\n          issueId\n          jira(fields: [\"key\"])\n          projectId\n        }\n      }\n    }\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "add tests to a specific folder in the test repository",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"tests moved\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.addTestsToFolder).to.not.be.undefined;",
													"    pm.expect(jsonData.data.addTestsToFolder.warnings).to.be.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    addTestsToFolder(\n        projectId: \"{{PROJECT_ID}}\",\n        path: \"{{F2_PATH}}\",\n        testIssueIds: [\"{{T4_ID}}\"]\n    ) {\n        folder {\n            name\n            path\n            testsCount\n        }\n        warnings\n    }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove tests from a specific folder in the test repository",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"tests removed from folder\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.data).to.not.be.empty;",
													"    pm.expect(jsonData.data.removeTestsFromFolder).to.not.be.undefined;",
													"    pm.expect(jsonData.data.removeTestsFromFolder).to.include(\"successfully\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{AUTH_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "mutation {\n    removeTestsFromFolder(\n        projectId: \"{{PROJECT_ID}}\",\n        testIssueIds: [\"{{T4_ID}}\"]\n    ) \n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{XRAY_API_BASEURL}}/graphql",
											"host": [
												"{{XRAY_API_BASEURL}}"
											],
											"path": [
												"graphql"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "global settings",
					"item": [
						{
							"name": "get issue link types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"link types returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.be.empty;",
											"    pm.expect(jsonData.data.getIssueLinkTypes).to.have.lengthOf(2);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    getIssueLinkTypes {\n            id\n            name\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get possible test statuses from configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"statuses returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.be.empty;",
											"    pm.expect(jsonData.data.getStatuses).to.have.lengthOf.at.least(4);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    getStatuses {\n        name\n        description\n        color\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "get possible test step statuses from configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"statuses returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.be.empty;",
											"    pm.expect(jsonData.data.getStepStatuses).to.have.lengthOf.at.least(4);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    getStepStatuses {\n        name\n        description\n        color\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "project settings",
					"item": [
						{
							"name": "get \"all\" project settings, in bulk",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"settings returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.be.empty;",
											"    pm.expect(jsonData.data.getProjectSettings.projectId).to.eq(pm.variables.get(\"PROJECT_ID\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AUTH_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    getProjectSettings ( projectIdOrKey: \"{{PROJECT_ID}}\" ) {\n        projectId,\n        testEnvironments,\n        testCoverageSettings {\n            coverableIssueTypeIds\n            epicIssuesRelation\n            issueSubTasksRelation\n            issueLinkTypeId\n            issueLinkTypeDirection\n        }\n        defectIssueTypes\n        testTypeSettings {\n            testTypes {\n                id\n                name\n                kind\n            }\n            defaultTestTypeId\n        }\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{XRAY_API_BASEURL}}/graphql",
									"host": [
										"{{XRAY_API_BASEURL}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{AUTH_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.environment.get(\"AUTH_TOKEN\")) ",
					"{",
					"    pm.sendRequest({",
					"        //url: pm.environment.get(\"api-url\") + 'v2/authenticate',",
					"        url:  'https://xray.cloud.getxray.app/api/v2/authenticate',",
					"        method: 'POST',",
					"        header: {",
					"            'content-type': 'application/json'",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({ client_id: pm.environment.get(\"client_id\"), client_secret: pm.environment.get(\"client_secret\") })",
					"        }",
					"    }, function (err, res) {",
					"        pm.environment.set(\"AUTH_TOKEN\", res.json());",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "XRAY_API_BASEURL",
			"value": "https://xray.cloud.getxray.app/api/v2"
		},
		{
			"key": "PROJECT_KEY",
			"value": "CALC"
		},
		{
			"key": "TEST_ISSUETYPE_NAME",
			"value": "Test"
		},
		{
			"key": "PRECONDITION_ISSUETYPE_NAME",
			"value": "Precondition"
		},
		{
			"key": "TESTSET_ISSUETYPE_NAME",
			"value": "Test Set"
		},
		{
			"key": "TESTEXECUTION_ISSUETYPE_NAME",
			"value": "Test Execution"
		},
		{
			"key": "TESTPLAN_ISSUETYPE_NAME",
			"value": "Test Plan"
		},
		{
			"key": "BUG_ISSUETYPE_NAME",
			"value": "Bug"
		},
		{
			"key": "STORY_ISSUETYPE_NAME",
			"value": "Story"
		},
		{
			"key": "PROJECT_VERSION",
			"value": "v3.0"
		}
	]
}